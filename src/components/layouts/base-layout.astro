---
import { ViewTransitions } from 'astro:transitions'
import '@fontsource/inter'
import '@fontsource-variable/raleway'
import '$styles/globals.css'

import NavigationBar from '$components/navigation-bar/navigation-wrapper.astro'
import CommandBar from '$components/command-palette/CommandBar.astro'
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<!-- Icons -->
		<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
		<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
		<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
		<link rel="manifest" href="/site.webmanifest" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<!-- Meta Tags -->
		<meta name="generator" content={Astro.generator} />

		<slot name="SEO" />
		<ViewTransitions fallback="swap" />
	</head>
	<body
		class="mx-auto mb-20 min-h-screen max-w-6xl grid-cols-sidebar-layout bg-body text-body md:mb-auto md:grid"
	>
		<NavigationBar />
		<main class="flex h-full flex-grow flex-col gap-4 text-base md:border-r md:border-highlight">
			<CommandBar />
			<div class="space-y-8 px-4 pb-4 pt-4 md:px-4 md:pt-0">
				<slot />
			</div>
		</main>

		<script is:inline>
			document.addEventListener('astro:page-load', (ev) => {
				const click = new Audio('/audio/clicky.mp3')
				const allLinkElements = document.querySelectorAll('nav a[href]')

				click.addEventListener('canplaythrough', () => {
					allLinkElements.forEach((link) => {
						link.addEventListener('click', playClick)
					})
				})

				function playClick() {
					click.volume = 0.2
					click.currentTime = 0
					click.play()
				}
			})
		</script>

		<script is:inline>
			function getSettings() {
				if (typeof localStorage !== undefined && localStorage.getItem('settings')) {
					return JSON.parse(localStorage.getItem('settings'))
				}

				if (window.matchMedia('(prefers-color-scheme: dark)')) {
					console.log('I got dark')
					return {
						theme: 'dark',
						codeTheme: 'default',
						rounded: 'on'
					}
				}

				return {
					theme: 'light',
					codeTheme: 'default',
					rounded: 'on'
				}
			}

			function setSettings(newDocument) {
				const element = newDocument.documentElement

				Object.keys(getSettings()).map((key) => {
					const value = getSettings()[key]

					element.dataset[key] = value
				})

				localStorage.setItem('settings', JSON.stringify(getSettings()))
			}

			setSettings(document)

			document.addEventListener('astro:before-swap', (ev) => {
				if (localStorage.getItem('settings')) {
					setSettings(ev.newDocument)
				}
			})
		</script>
	</body>
</html>
