---
import Logo from './Logo.astro'
import { Links } from './NavigationLinks'
import MobileNavigationBar from './MobileNavigationBar.astro'
import StatusCard from '@components/StatusCard.svelte'
import { Icon } from 'astro-icon/components'

const pageName = Astro.url.pathname
---

<nav
	class="fixed bottom-0 left-0 right-0 z-[99999] flex h-24 items-center gap-4 border-t-4 border-highlight bg-body md:sticky md:top-0 md:h-auto md:max-h-screen md:flex-col md:items-start md:border-x-2 md:border-y-0 md:p-4"
>
	<div class="hidden md:block">
		<Logo />
	</div>

	<!-- Navigation -->
	<section class="hidden w-full flex-col justify-between gap-4 md:flex">
		<ul class="flex flex-grow flex-col gap-4 font-heading">
			{
				Links.map((link) => (
					<li class="flex-grow ">
						<a
							href={link.url}
							class="flex items-center gap-2 p-2 text-sm font-semibold"
							aria-current={pageName === link.url ? 'page' : 'false'}
						>
							<Icon name={link.icon} class="h-6 w-6" />
							<span>{link.name}</span>
							<Icon
								name="svg-spinners:180-ring"
								data-loading="false"
								class="loading ml-auto hidden text-body data-[loading=true]:inline-block"
							/>
						</a>
					</li>
				))
			}
		</ul>
	</section>

	<div class="mt-auto hidden w-full md:block">
		<StatusCard client:only="svelte" transition:persist="status-card" />
	</div>

	<MobileNavigationBar pageName={pageName} />
</nav>
<style>
	a[aria-current='page'] {
		position: relative;
		font-weight: 900;
		z-index: 999999;
		@apply text-button-text-active;

		view-transition-name: current-page;
	}

	a[aria-current='page']::before {
		content: '';
		position: absolute;
		inset: 0;
		@apply bg-button-active;
		@apply rounded-lg;
		z-index: -1;
	}

	a[aria-current='page'] svg {
		@apply animate-bounce;
	}

	a:not([aria-current='page']):hover svg {
		@apply text-icon-hover;
	}

	.loading[data-loading='true'] {
		display: inline-block;
	}
</style>

<script is:inline>
	document.addEventListener('astro:before-preparation', (ev) => {
		const originalLoader = ev.loader
		const allLinkElements = document.querySelectorAll('a[aria-current]')
		const linkArray = [...allLinkElements]
		ev.loader = async function () {
			const fromPathname = ev.from.href
			const toPathname = ev.to.href
			const fromLinkElement = linkArray.find((element) => element.href === fromPathname)
			const toLinkElement = linkArray.find((element) => element.href === fromPathname)
			toLinkElement.dataset.loading = 'true'
			console.log(toLinkElement.dataset)
			await originalLoader()
			toLinkElement.dataset.loading = 'false'
		}
	})
</script>
